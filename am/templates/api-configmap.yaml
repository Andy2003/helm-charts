{{- if .Values.api.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ template "gravitee.name" . }}
    component: "{{ .Values.api.name }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "gravitee.api.fullname" . }}
data:
  gravitee.yml: |
    # Management repository used to store the environment configuration
    management:
      type: mongodb
      mongodb:
        {{- if .Values.mongo.uri }}
        uri: {{ .Values.mongo.uri }}
        {{ else }}
        uri: mongodb://{{- if (eq .Values.mongo.auth.enabled true) }}{{ .Values.mongo.auth.username }}:{{ .Values.mongo.auth.password }}@{{- end }}{{ .Values.mongo.dbhost }}:{{ .Values.mongo.dbport }}/{{ .Values.mongo.dbname }}?{{- if .Values.mongo.rsEnabled }}&replicaSet={{ .Values.mongo.rs }}{{- end }}{{- if (eq .Values.mongo.auth.enabled true) }}&authSource={{ .Values.mongo.auth.source }}{{- end }}{{- if .Values.mongo.connectTimeoutMS }}&connectTimeoutMS={{ .Values.mongo.connectTimeoutMS }}{{- end }}
        {{- end }}

    # OAuth2 repository is used to store OAuth2 tokens: access_token, refresh_token
    oauth2:
      type: mongodb
      mongodb:
        {{- if .Values.mongo.uri }}
        uri: {{ .Values.mongo.uri }}
        {{ else }}
        uri: mongodb://{{- if (eq .Values.mongo.auth.enabled true) }}{{ .Values.mongo.auth.username }}:{{ .Values.mongo.auth.password }}@{{- end }}{{ .Values.mongo.dbhost }}:{{ .Values.mongo.dbport }}/{{ .Values.mongo.dbname }}?{{- if .Values.mongo.rsEnabled }}&replicaSet={{ .Values.mongo.rs }}{{- end }}{{- if (eq .Values.mongo.auth.enabled true) }}&authSource={{ .Values.mongo.auth.source }}{{- end }}{{- if .Values.mongo.connectTimeoutMS }}&connectTimeoutMS={{ .Values.mongo.connectTimeoutMS }}{{- end }}
        {{- end }}

    # Technical services
    services:
      core:
        http:
          enabled: true
          port: 18093
          host: localhost
          authentication:
            type: basic
            users:
              admin: adminadmin

    # SMTP configuration used to send mails
    email:
      enabled: {{ .Values.smtp.enabled }}
      host: {{ .Values.smtp.host }}
      subject: "[Gravitee.io] %s"
      port: {{ .Values.smtp.port }}
      from: {{ .Values.smtp.from }}
      username: {{ .Values.smtp.username }}
      password: {{ .Values.smtp.password }}
      properties:
        auth: {{ .Values.smtp.properties.auth }}
        starttls.enable: {{ .Values.smtp.properties.starttlsEnable }}

    # Mail templates
    templates:
      path: ${gravitee.home}/templates

    jwt:
      secret: {{ .Values.jwtSecret }}
      #kid: default-gravitee-AM-key # kid (key ID) Header Parameter is a hint indicating which key was used to secure the JWT
      #expire-after: 604800 # the end of validity of the token in seconds (default 604800 = a week)
      #issuer: https://gravitee.am # the principal that issued the JWT (default https://gravitee.am)
      #cookie-path: / # cookie context path (default /)
      #cookie-domain: .gravitee.io cookie domain (default "")
      #cookie-secure: true # cookie secure flag (default false)

  {{- if .Values.api.logging.debug }}
  logback.xml: |
    <?xml version="1.0" encoding="UTF-8"?>

    <!--
      ~ Copyright (c) 2015-2016, The Gravitee team (http://www.gravitee.io)
      ~
      ~  Licensed under the Apache License, Version 2.0 (the "License");
      ~  you may not use this file except in compliance with the License.
      ~  You may obtain a copy of the License at
      ~
      ~  http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~  Unless required by applicable law or agreed to in writing, software
      ~  distributed under the License is distributed on an "AS IS" BASIS,
      ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~  See the License for the specific language governing permissions and
      ~  limitations under the License.
      -->

        <configuration>

            <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
                <!-- encoders are assigned the type
                    ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
                <encoder>
                    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                </encoder>
            </appender>

            <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${gravitee.management.log.dir}/gravitee.log</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!-- daily rollover -->
                    <fileNamePattern>${gravitee.management.log.dir}/gravitee_%d{yyyy-MM-dd}.log</fileNamePattern>

                    <!-- keep 30 days' worth of history -->
                    <maxHistory>30</maxHistory>
                </rollingPolicy>

                <encoder>
                    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                </encoder>
            </appender>

            <logger name="io.gravitee" level="DEBUG" />
            <logger name="org.eclipse.jetty" level="INFO" />

            <!-- Strictly speaking, the level attribute is not necessary since -->
            <!-- the level of the root level is set to DEBUG by default.       -->
            <root level="WARN">
                <appender-ref ref="STDOUT" />
                <appender-ref ref="FILE" />
            </root>

        </configuration>
  {{- end }}
{{- end -}}